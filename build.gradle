buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.3'
        corda_gradle_plugins_version = '4.0.45'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'.toInteger()
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda' }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}


apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

cordapp {
    info {
        name "CorDapp Template"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version
        minimumPlatformVersion corda_platform_version
    }
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters" // Required for shell commands.
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    signing {
        enabled true
        generateKeystore true
        all false
        options {
            keystore "./build/nodes/jarSignKeystore.p12"
            alias "cordapp-signer"
            storepass "secret1!"
            storetype "PKCS12"
            dname "OU=Dummy Cordapp Distributor, O=Corda, L=London, C=GB"
            keyalg "RSA"
        }
    }

    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10001
        rpcSettings {
            address("localhost:10002")
            adminAddress("localhost:10042")
        }
    }
    node {
        name "O=Farmer,L=London,C=GB"
        p2pPort 10003
        rpcSettings {
            address("localhost:10004")
            adminAddress("localhost:10044")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                'dataSourceProperties':[
                        'dataSourceClassName':"org.postgresql.ds.PGSimpleDataSource",
                        'dataSource.url' :"jdbc:postgresql://13.76.226.236:30301/tomatoFarm",
                        'dataSource.user' : 'postgres',
                        'dataSource.password' :'Welcome@123',
                        'maximumPoolSize':'10',
                        'connectionTimeout':'50000'
                ],
                'database': [
                        'transactionIsolationLevel':'READ_COMMITTED',
                        'initialiseSchema':true

                ],
                jarDirs: ["D:/jdbc/"]
        ]

    }
    node {
        name "O=Logistic,L=New York,C=US"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                'dataSourceProperties':[
                        'dataSourceClassName':"org.postgresql.ds.PGSimpleDataSource",
                        'dataSource.url' :"jdbc:postgresql://13.76.226.236:30301/tomatoLogistic",
                        'dataSource.user' : 'postgres',
                        'dataSource.password' :'Welcome@123',
                        'maximumPoolSize':'10',
                        'connectionTimeout':'50000'
                ],
                'database': [
                        'transactionIsolationLevel':'READ_COMMITTED',
                        'initialiseSchema':true

                ],
                jarDirs: ["D:/jdbc/"]
        ]
    }
    node {
        name "O=Distributor,L=London,C=GB"
        p2pPort 10007
        rpcSettings {
            address("localhost:10008")
            adminAddress("localhost:10048")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                'dataSourceProperties':[
                        'dataSourceClassName':"org.postgresql.ds.PGSimpleDataSource",
                        'dataSource.url' :"jdbc:postgresql://13.76.226.236:30301/tomatoDistributor",
                        'dataSource.user' : 'postgres',
                        'dataSource.password' :'Welcome@123',
                        'maximumPoolSize':'10',
                        'connectionTimeout':'50000'
                ],
                'database': [
                        'transactionIsolationLevel':'READ_COMMITTED',
                        'initialiseSchema':true

                ],
                jarDirs: ["D:/jdbc/"]
        ]
    }
    node {
        name "O=Restaurant,L=London,C=GB"
        p2pPort 10009
        rpcSettings {
            address("localhost:10010")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        extraConfig = [
                'dataSourceProperties':[
                        'dataSourceClassName':"org.postgresql.ds.PGSimpleDataSource",
                        'dataSource.url' :"jdbc:postgresql://13.76.226.236:30301/tomatoRestaurant",
                        'dataSource.user' : 'postgres',
                        'dataSource.password' :'Welcome@123',
                        'maximumPoolSize':'10',
                        'connectionTimeout':'50000'
                ],
                'database': [
                        'transactionIsolationLevel':'READ_COMMITTED',
                        'initialiseSchema':true

                ],
                jarDirs: ["D:/jdbc/"]
        ]
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}